#include <stdio.h>
#include <string.h>
#include <ctype.h>
void prepareKey(char key[], char keyMatrix[5][5]) {
    int i, j, k;
    char uniqueChars[26] = {0};
    int keyLength = strlen(key);
    int row = 0, col = 0;
    k = 0;
    for (i = 0; i < keyLength; i++) {
        if (key[i] == ' ') {
            continue;
        }
        char c = toupper(key[i]);
        if (!uniqueChars[c - 'A']) {
            uniqueChars[c - 'A'] = 1;
            keyMatrix[row][col] = c;
            col++;
            if (col == 5) {
                col = 0;
                row++;
            }
        }
    }
    for (i = 0; i < 26; i++) {
        if (i != ('J' - 'A') && !uniqueChars[i]) {
            keyMatrix[row][col] = 'A' + i;
            col++;
            if (col == 5) {
                col = 0;
                row++;
            }
        }
    }
}
void findCoordinates(char keyMatrix[5][5], char c, int *row, int *col) {
    if (c == 'J') {
        c = 'I'; 
    }
    for (*row = 0; *row < 5; (*row)++) {
        for (*col = 0; *col < 5; (*col)++) {
            if (keyMatrix[*row][*col] == c) {
                return;
            }
        }
    }
}
void encrypt(char keyMatrix[5][5], char plaintext[], char ciphertext[]) {
    int i, row1, col1, row2, col2;
    int len = strlen(plaintext);

    for (i = 0; i < len; i += 2) {
        char c1 = toupper(plaintext[i]);
        char c2 = (i + 1 < len) ? toupper(plaintext[i + 1]) : 'X';

        findCoordinates(keyMatrix, c1, &row1, &col1);
        findCoordinates(keyMatrix, c2, &row2, &col2);

        if (row1 == row2) {
            ciphertext[i] = keyMatrix[row1][(col1 + 1) % 5];
            ciphertext[i + 1] = keyMatrix[row2][(col2 + 1) % 5];
        } else if (col1 == col2) {
            ciphertext[i] = keyMatrix[(row1 + 1) % 5][col1];
            ciphertext[i + 1] = keyMatrix[(row2 + 1) % 5][col2];
        } else {
            ciphertext[i] = keyMatrix[row1][col2];
            ciphertext[i + 1] = keyMatrix[row2][col1];
        }
    }
}

int main() {
    char key[50], plaintext[100], ciphertext[100];
    char keyMatrix[5][5];

    printf("Enter the key (no spaces, all uppercase): ");
    scanf("%s", key);

    printf("Enter the plaintext (no spaces, all uppercase): ");
    scanf("%s", plaintext);

    prepareKey(key, keyMatrix);
    encrypt(keyMatrix, plaintext, ciphertext);

    printf("Encrypted text: %s\n", ciphertext);

    return 0;
}
